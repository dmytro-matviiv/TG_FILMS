# bot.py - –ì–æ–ª–æ–≤–Ω–∏–π —Ñ–∞–π–ª Telegram –±–æ—Ç–∞ –¥–ª—è –ø–æ—à—É–∫—É —Ñ—ñ–ª—å–º—ñ–≤

# –Ü–º–ø–æ—Ä—Ç—É—î–º–æ –Ω–µ–æ–±—Ö—ñ–¥–Ω—ñ –±—ñ–±–ª—ñ–æ—Ç–µ–∫–∏
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, CallbackQueryHandler, filters, ContextTypes
import logging
import re  # –î–ª—è –ø–æ—à—É–∫—É –∫–æ–¥—É –≤ —Ç–µ–∫—Å—Ç—ñ

# –Ü–º–ø–æ—Ä—Ç—É—î–º–æ –Ω–∞—à—ñ –≤–ª–∞—Å–Ω—ñ —Ñ–∞–π–ª–∏
import config
import database
from channel_scanner import scanner

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è (—â–æ–± –±–∞—á–∏—Ç–∏ —â–æ –≤—ñ–¥–±—É–≤–∞—î—Ç—å—Å—è)
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)


# ========== –§–£–ù–ö–¶–Ü–Ø –ü–ï–†–ï–í–Ü–†–ö–ò –ü–Ü–î–ü–ò–°–ö–ò ==========

async def check_subscription(user_id: int, context: ContextTypes.DEFAULT_TYPE) -> bool:
    """
    –ü–µ—Ä–µ–≤—ñ—Ä—è—î, —á–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –ø—ñ–¥–ø–∏—Å–∞–Ω–∏–π –Ω–∞ –∫–∞–Ω–∞–ª.
    
    –ü–∞—Ä–∞–º–µ—Ç—Ä–∏:
    - user_id: Telegram ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    - context: –∫–æ–Ω—Ç–µ–∫—Å—Ç –±–æ—Ç–∞ (–¥–ª—è –¥–æ—Å—Ç—É–ø—É –¥–æ API)
    
    –ü–æ–≤–µ—Ä—Ç–∞—î:
    - True: —è–∫—â–æ –ø—ñ–¥–ø–∏—Å–∞–Ω–∏–π
    - False: —è–∫—â–æ –ù–ï –ø—ñ–¥–ø–∏—Å–∞–Ω–∏–π
    """
    try:
        # –û—Ç—Ä–∏–º—É—î–º–æ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –≤ –∫–∞–Ω–∞–ª—ñ
        member = await context.bot.get_chat_member(
            chat_id=config.CHANNEL_USERNAME,
            user_id=user_id
        )
        
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Å—Ç–∞—Ç—É—Å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
        # –°—Ç–∞—Ç—É—Å–∏: 'creator' (–≤–ª–∞—Å–Ω–∏–∫), 'administrator' (–∞–¥–º—ñ–Ω), 'member' (—É—á–∞—Å–Ω–∏–∫)
        # 'left' (–≤–∏–π—à–æ–≤), 'kicked' (–∑–∞–±–∞–Ω–µ–Ω–∏–π)
        
        if member.status in ['creator', 'administrator', 'member']:
            return True  # –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –ø—ñ–¥–ø–∏—Å–∞–Ω–∏–π
        else:
            return False  # –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –ù–ï –ø—ñ–¥–ø–∏—Å–∞–Ω–∏–π
            
    except Exception as e:
        # –Ø–∫—â–æ –≤–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, –∫–∞–Ω–∞–ª –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ)
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–≤—ñ—Ä—Ü—ñ –ø—ñ–¥–ø–∏—Å–∫–∏: {e}")
        return False


# ========== –ö–û–ú–ê–ù–î–ê /START ==========

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –û–±—Ä–æ–±–Ω–∏–∫ –∫–æ–º–∞–Ω–¥–∏ /start
    –¶–µ –ø–µ—Ä—à–µ, —â–æ –±–∞—á–∏—Ç—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –ø—Ä–∏ –∑–∞–ø—É—Å–∫—É –±–æ—Ç–∞
    """
    user = update.effective_user  # –û—Ç—Ä–∏–º—É—î–º–æ –¥–∞–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    
    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –ø—ñ–¥–ø–∏—Å–∫—É
    is_subscribed = await check_subscription(user.id, context)
    
    if is_subscribed:
        # –Ø–∫—â–æ –ø—ñ–¥–ø–∏—Å–∞–Ω–∏–π - –ø–æ–∫–∞–∑—É—î–º–æ –ø—Ä–∏–≤—ñ—Ç–∞–Ω–Ω—è
        welcome_text = f"""
–ü—Ä–∏–≤—ñ—Ç, {user.first_name}! üëã

–õ–∞—Å–∫–∞–≤–æ –ø—Ä–æ—Å–∏–º–æ –¥–æ –±–æ—Ç–∞ –ø–æ—à—É–∫—É —Ñ—ñ–ª—å–º—ñ–≤!

–Ø–∫ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—Ç–∏—Å—å:
1. –ó–Ω–∞–π–¥—ñ—Ç—å –∫–æ–¥ —Ñ—ñ–ª—å–º—É –≤ TikTok –≤—ñ–¥–µ–æ
2. –ù–∞–¥—ñ—à–ª—ñ—Ç—å –º–µ–Ω—ñ —Ü–µ–π –∫–æ–¥ (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥: F001)
3. –Ø –∑–Ω–∞–π–¥—É –Ω–∞–∑–≤—É —Ç–∞ –æ–ø–∏—Å —Ñ—ñ–ª—å–º—É

–ü—Ä–æ—Å—Ç–æ –Ω–∞–¥—ñ—à–ª—ñ—Ç—å –∫–æ–¥ —Ñ—ñ–ª—å–º—É!
"""
        await update.message.reply_text(welcome_text)
    else:
        # –Ø–∫—â–æ –ù–ï –ø—ñ–¥–ø–∏—Å–∞–Ω–∏–π - –ø—Ä–æ—Å–∏–º–æ –ø—ñ–¥–ø–∏—Å–∞—Ç–∏—Å—å
        # –°—Ç–≤–æ—Ä—é—î–º–æ –∫–Ω–æ–ø–∫—É –∑ –ø–æ—Å–∏–ª–∞–Ω–Ω—è–º –Ω–∞ –∫–∞–Ω–∞–ª
        keyboard = [
            [InlineKeyboardButton("–ü—ñ–¥–ø–∏—Å–∞—Ç–∏—Å—å –Ω–∞ –∫–∞–Ω–∞–ª", url=f"https://t.me/{config.CHANNEL_USERNAME[1:]}")],
            [InlineKeyboardButton("–Ø –ø—ñ–¥–ø–∏—Å–∞–≤—Å—è ‚úì", callback_data="check_subscription")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        subscribe_text = f"""
–©–æ–± –∫–æ—Ä–∏—Å—Ç—É–≤–∞—Ç–∏—Å—å–±–æ—Ç–æ–º, –ø–æ—Ç—Ä—ñ–±–Ω–æ –ø—ñ–¥–ø–∏—Å–∞—Ç–∏—Å—å –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª!

–ö–∞–Ω–∞–ª: {config.CHANNEL_USERNAME}

–¢–∞–º –≤–∏ –∑–Ω–∞–π–¥–µ—Ç–µ:
- –ö–æ–¥–∏ —Ñ—ñ–ª—å–º—ñ–≤ –∑ TikTok
- –¶—ñ–∫–∞–≤—ñ –ø—ñ–¥–±—ñ—Ä–∫–∏
- –ù–æ–≤–∏–Ω–∫–∏ –∫—ñ–Ω–æ

–ü—ñ—Å–ª—è –ø—ñ–¥–ø–∏—Å–∫–∏ –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å "–Ø –ø—ñ–¥–ø–∏—Å–∞–≤—Å—è ‚úì"
"""
        await update.message.reply_text(subscribe_text, reply_markup=reply_markup)


# ========== –û–ë–†–û–ë–ö–ê –ù–ê–¢–ò–°–ö–ê–ù–ù–Ø –ö–ù–û–ü–ö–ò "–Ø –ü–Ü–î–ü–ò–°–ê–í–°–Ø" ==========

async def button_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –û–±—Ä–æ–±–ª—è—î –Ω–∞—Ç–∏—Å–∫–∞–Ω–Ω—è –Ω–∞ –∫–Ω–æ–ø–∫–∏ (callback queries)
    """
    query = update.callback_query
    await query.answer()  # –ü—ñ–¥—Ç–≤–µ—Ä–¥–∂—É—î–º–æ –Ω–∞—Ç–∏—Å–∫–∞–Ω–Ω—è
    
    if query.data == "check_subscription":
        # –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–∞—Ç–∏—Å–Ω—É–≤ "–Ø –ø—ñ–¥–ø–∏—Å–∞–≤—Å—è"
        user = query.from_user
        
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –ø—ñ–¥–ø–∏—Å–∫—É —â–µ —Ä–∞–∑
        is_subscribed = await check_subscription(user.id, context)
        
        if is_subscribed:
            # –ü—ñ–¥–ø–∏—Å–∫–∞ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–∞!
            success_text = f"""
–î—è–∫—É—é –∑–∞ –ø—ñ–¥–ø–∏—Å–∫—É, {user.first_name}! ‚úì

–¢–µ–ø–µ—Ä –≤–∏ –º–æ–∂–µ—Ç–µ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—Ç–∏—Å—å –±–æ—Ç–æ–º!

–ù–∞–¥—ñ—à–ª—ñ—Ç—å –º–µ–Ω—ñ –∫–æ–¥ —Ñ—ñ–ª—å–º—É (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥: F001)
"""
            await query.edit_message_text(success_text)
        else:
            # –í—Å–µ —â–µ –Ω–µ –ø—ñ–¥–ø–∏—Å–∞–Ω–∏–π - –ø–æ–∫–∞–∑—É—î–º–æ –ø–æ–º–∏–ª–∫—É –ê–õ–ï –∑–±–µ—Ä—ñ–≥–∞—î–º–æ –∫–Ω–æ–ø–∫–∏
            error_text = """
–ó–¥–∞—î—Ç—å—Å—è, –≤–∏ —â–µ –Ω–µ –ø—ñ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ –∫–∞–Ω–∞–ª üòî

–ë—É–¥—å –ª–∞—Å–∫–∞:
1. –ù–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫—É "–ü—ñ–¥–ø–∏—Å–∞—Ç–∏—Å—å –Ω–∞ –∫–∞–Ω–∞–ª"
2. –ü—ñ–¥–ø–∏—à—ñ—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª
3. –ü–æ–≤–µ—Ä–Ω—ñ—Ç—å—Å—è —Å—é–¥–∏ —Ç–∞ –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å "–Ø –ø—ñ–¥–ø–∏—Å–∞–≤—Å—è ‚úì"
"""
            
            # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ—ó —Å–ø—Ä–æ–±–∏
            keyboard = [
                [InlineKeyboardButton("–ü—ñ–¥–ø–∏—Å–∞—Ç–∏—Å—å –Ω–∞ –∫–∞–Ω–∞–ª", url=f"https://t.me/{config.CHANNEL_USERNAME[1:]}")],
                [InlineKeyboardButton("–Ø –ø—ñ–¥–ø–∏—Å–∞–≤—Å—è ‚úì", callback_data="check_subscription")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await query.edit_message_text(error_text, reply_markup=reply_markup)
    
    elif query.data == "refresh_database":
        # –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–∞—Ç–∏—Å–Ω—É–≤ "–û–Ω–æ–≤–∏—Ç–∏" –≤ –ø–∞–Ω–µ–ª—ñ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö
        user = query.from_user
        
        if user.id != config.ADMIN_ID:
            await query.edit_message_text("–¶—è —Ñ—É–Ω–∫—Ü—ñ—è –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç—ñ–ª—å–∫–∏ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—É!")
            return
        
        # –û–Ω–æ–≤–ª—é—î–º–æ —Å–ø–∏—Å–æ–∫ —Ñ—ñ–ª—å–º—ñ–≤
        movies = database.get_all_movies()
        
        if not movies:
            await query.edit_message_text(
                "–ë–∞–∑–∞ –¥–∞–Ω–∏—Ö –ø–æ—Ä–æ–∂–Ω—è!\n\n"
                "–ü—É–±–ª—ñ–∫—É–π—Ç–µ –ø–æ—Å—Ç–∏ –≤ –∫–∞–Ω–∞–ª –∑ —Ç–µ–∫—Å—Ç–æ–º '–ö–æ–¥: 001'"
            )
            return
        
        # –§–æ—Ä–º—É—î–º–æ –Ω–æ–≤–∏–π —Å–ø–∏—Å–æ–∫
        text = f"üìä –ë–∞–∑–∞ –¥–∞–Ω–∏—Ö —Ñ—ñ–ª—å–º—ñ–≤ ({len(movies)} —Ñ—ñ–ª—å–º—ñ–≤)\n\n"
        
        # –°–ª–æ–≤–Ω–∏–∫ –∑ –Ω–∞–∑–≤–∞–º–∏ —Ñ—ñ–ª—å–º—ñ–≤
        movie_titles = {
            '001': '–ù—ñ—Ö—Ç–æ2',
            '002': '–ì–æ–ª–æ–≤–∏ –¥–µ—Ä–∂–∞–≤'
        }
        
        for i, movie in enumerate(movies, 1):
            # –û—Ç—Ä–∏–º—É—î–º–æ –Ω–∞–∑–≤—É –∑ –Ω–∞—à–æ–≥–æ —Å–ª–æ–≤–Ω–∏–∫–∞
            title = movie_titles.get(movie['code'], '–ù–µ–≤—ñ–¥–æ–º–∞ –Ω–∞–∑–≤–∞')
            text += f"{i}. **{movie['code']}** - {title}\n"
        
        # –°—Ç–≤–æ—Ä—é—î–º–æ –∫–Ω–æ–ø–∫–∏
        keyboard = []
        for i in range(0, len(movies), 2):
            row = []
            for j in range(2):
                if i + j < len(movies):
                    movie = movies[i + j]
                    row.append(InlineKeyboardButton(
                        f"üóëÔ∏è {movie['code']}", 
                        callback_data=f"delete_{movie['code']}"
                    ))
            keyboard.append(row)
        
        keyboard.append([InlineKeyboardButton("üîÑ –û–Ω–æ–≤–∏—Ç–∏", callback_data="refresh_database")])
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(text, reply_markup=reply_markup, parse_mode='Markdown')
    
    elif query.data.startswith("delete_"):
        # –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–∞—Ç–∏—Å–Ω—É–≤ –∫–Ω–æ–ø–∫—É –≤–∏–¥–∞–ª–µ–Ω–Ω—è —Ñ—ñ–ª—å–º—É
        user = query.from_user
        
        if user.id != config.ADMIN_ID:
            await query.edit_message_text("–¶—è —Ñ—É–Ω–∫—Ü—ñ—è –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç—ñ–ª—å–∫–∏ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—É!")
            return
        
        # –û—Ç—Ä–∏–º—É—î–º–æ –∫–æ–¥ —Ñ—ñ–ª—å–º—É
        code = query.data.replace("delete_", "")
        
        # –í–∏–¥–∞–ª—è—î–º–æ —Ñ—ñ–ª—å–º
        success = database.delete_movie(code)
        
        if success:
            await query.edit_message_text(f"‚úÖ –§—ñ–ª—å–º –∑ –∫–æ–¥–æ–º {code} –≤–∏–¥–∞–ª–µ–Ω–æ!")
        else:
            await query.edit_message_text(f"‚ùå –§—ñ–ª—å–º –∑ –∫–æ–¥–æ–º {code} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ!")


# ========== –ê–í–¢–û–ú–ê–¢–ò–ß–ù–ï –ó–ß–ò–¢–£–í–ê–ù–ù–Ø –ü–û–°–¢–Ü–í –ó –ö–ê–ù–ê–õ–£ ==========

async def handle_channel_post(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –û–ü–¢–ò–ú–Ü–ó–û–í–ê–ù–ê –§–£–ù–ö–¶–Ü–Ø! –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –∑—á–∏—Ç—É—î –ø–æ—Å—Ç–∏ –∑ –∫–∞–Ω–∞–ª—É.
    
    –û—á—ñ–∫—É–≤–∞–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç –ø–æ—Å—Ç–∞:
    ---
    [–§–û–¢–û]
    –ö–æ–¥: F001
    –ù–∞–∑–≤–∞: Inception
    –†—ñ–∫: 2010
    
    –û–ø–∏—Å:
    –§—ñ–ª—å–º –ø—Ä–æ —Å–Ω–∏ –≤ —Å–Ω–∞—Ö
    ---
    
    –ë–æ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ:
    1. –ß–∏—Ç–∞—î –ø–æ—Å—Ç –∑ –∫–∞–Ω–∞–ª—É
    2. –ó–Ω–∞—Ö–æ–¥–∏—Ç—å "–ö–æ–¥: F001"
    3. –ó–±–µ—Ä—ñ–≥–∞—î –≤ –±–∞–∑—É –¥–∞–Ω–∏—Ö
    4. –ù–∞–¥—Å–∏–ª–∞—î –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –∞–¥–º—ñ–Ω—É
    """
    # –û—Ç—Ä–∏–º—É—î–º–æ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –ø–æ—Å—Ç
    post = update.channel_post
    
    if not post:
        return
    
    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ —Ü–µ –Ω–∞—à –∫–∞–Ω–∞–ª
    if post.chat.username != config.CHANNEL_USERNAME.replace("@", ""):
        logger.info(f"–ü–æ—Å—Ç –∑ —ñ–Ω—à–æ–≥–æ –∫–∞–Ω–∞–ª—É (@{post.chat.username}), —ñ–≥–Ω–æ—Ä—É—î–º–æ")
        return
    
    # –û—Ç—Ä–∏–º—É—î–º–æ —Ç–µ–∫—Å—Ç –∑ –ø–æ—Å—Ç–∞
    # –Ø–∫—â–æ —î —Ñ–æ—Ç–æ - —Ç–µ–∫—Å—Ç –±—É–¥–µ –≤ caption, —è–∫—â–æ —Ç—ñ–ª—å–∫–∏ —Ç–µ–∫—Å—Ç - –≤ text
    text = post.caption or post.text or ""
    
    if not text:
        logger.info("‚ö†Ô∏è –ü–æ—Å—Ç –±–µ–∑ —Ç–µ–∫—Å—Ç—É, –ø—Ä–æ–ø—É—Å–∫–∞—î–º–æ")
        return
    
    # –®—É–∫–∞—î–º–æ –∫–æ–¥ –≤ —Ç–µ–∫—Å—Ç—ñ: "–ö–æ–¥: F001" (—Ä–µ–≥—ñ—Å—Ç—Ä –Ω–µ –≤–∞–∂–ª–∏–≤–∏–π)
    match = re.search(r'[–ö–∫][–û–æ][–î–¥]:\s*([A-Za-z0-9]+)', text)
    
    if match:
        code = match.group(1).upper()  # F001
        message_id = post.message_id
        chat_id = post.chat_id
        
        # –î–æ–¥–∞—Ç–∫–æ–≤–æ —à—É–∫–∞—î–º–æ –Ω–∞–∑–≤—É (–æ–ø—Ü—ñ–æ–Ω–∞–ª—å–Ω–æ, –¥–ª—è –ª–æ–≥—ñ–≤)
        title_match = re.search(r'[–ù–Ω][–ê–∞][–ó–∑][–í–≤][–ê–∞]:\s*(.+)', text)
        title = title_match.group(1).strip() if title_match else "–ù–µ–≤—ñ–¥–æ–º–∞"
        
        # –®—É–∫–∞—î–º–æ –ø–æ—Å–∏–ª–∞–Ω–Ω—è –≤ —Ç–µ–∫—Å—Ç—ñ
        # –§–æ—Ä–º–∞—Ç–∏: "–ü–æ—Å–∏–ª–∞–Ω–Ω—è: https://...", "Link: https://...", "–°—Å—ã–ª–∫–∞: https://..."
        link_match = re.search(r'(?:[–ü–ø][–û–æ][–°—Å][–ò–∏][–õ–ª][–ê–∞][–ù–Ω][–ù–Ω][–Ø—è]|[–õ–ª][–ò–∏][–ù–Ω][–ö–∫]|[–°—Å][–°—Å][–´—ã][–õ–ª][–ö–∫][–ê–∞]):\s*(https?://[^\s]+)', text)
        link = link_match.group(1) if link_match else None
        
        # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –≤ –±–∞–∑—É
        success = database.add_movie(code, message_id, chat_id, link)
        
        if success:
            # –§–æ—Ä–º—É—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–ª—è –ª–æ–≥—É
            log_message = f"–ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –¥–æ–¥–∞–Ω–æ: {code} - {title} (msg_id: {message_id})"
            logger.info(log_message)
            
            # üîî –ù–ê–î–°–ò–õ–ê–Ñ–ú–û –ü–Ü–î–¢–í–ï–†–î–ñ–ï–ù–ù–Ø –ê–î–ú–Ü–ù–£
            try:
                confirmation_text = f"""
–§—ñ–ª—å–º —É—Å–ø—ñ—à–Ω–æ –¥–æ–¥–∞–Ω–æ –≤ –±–∞–∑—É!

–ö–æ–¥: {code}
–ù–∞–∑–≤–∞: {title}
Message ID: {message_id}
–ü–æ—Å–∏–ª–∞–Ω–Ω—è: {link if link else '–ù–µ –≤–∫–∞–∑–∞–Ω–æ'}

–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ —Ç–µ–ø–µ—Ä –º–æ–∂—É—Ç—å –∑–Ω–∞–π—Ç–∏ –π–æ–≥–æ –∑–∞ –∫–æ–¥–æ–º {code}
"""
                await context.bot.send_message(
                    chat_id=config.ADMIN_ID,
                    text=confirmation_text
                )
            except Exception as e:
                logger.error(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –∞–¥–º—ñ–Ω—É: {e}")
                
        else:
            # –ö–æ–¥ –≤–∂–µ —ñ—Å–Ω—É—î
            logger.warning(f"–ö–æ–¥ {code} –≤–∂–µ —ñ—Å–Ω—É—î –≤ –±–∞–∑—ñ! –ü–æ—Å—Ç –ù–ï –¥–æ–¥–∞–Ω–æ.")
            
            # –ü–æ–≤—ñ–¥–æ–º–ª—è—î–º–æ –∞–¥–º—ñ–Ω—É –ø—Ä–æ –¥—É–±–ª—ñ–∫–∞—Ç
            try:
                await context.bot.send_message(
                    chat_id=config.ADMIN_ID,
                    text=f"–ü–æ–º–∏–ª–∫–∞! –ö–æ–¥ {code} –≤–∂–µ —ñ—Å–Ω—É—î –≤ –±–∞–∑—ñ.\n\n–í–∏–±–µ—Ä—ñ—Ç—å —ñ–Ω—à–∏–π –∫–æ–¥ –∞–±–æ –≤–∏–¥–∞–ª—ñ—Ç—å —Å—Ç–∞—Ä–∏–π: /delete {code}"
                )
            except Exception as e:
                logger.error(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ –ø–æ–ø–µ—Ä–µ–¥–∂–µ–Ω–Ω—è –∞–¥–º—ñ–Ω—É: {e}")
    else:
        logger.info("–ö–æ–¥ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –≤ –ø–æ—Å—Ç—ñ (–Ω–µ –º–∞—î '–ö–æ–¥: ...')")


# ========== –ü–û–®–£–ö –§–Ü–õ–¨–ú–£ –ó–ê –ö–û–î–û–ú ==========

async def search_movie(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –û–±—Ä–æ–±–ª—è—î —Ç–µ–∫—Å—Ç–æ–≤—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤—ñ–¥ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    –Ø–∫—â–æ —Ü–µ –∫–æ–¥ —Ñ—ñ–ª—å–º—É - —à—É–∫–∞—î –π–æ–≥–æ –≤ –±–∞–∑—ñ
    """
    user = update.effective_user
    message_text = update.message.text.strip().upper()  # –û—Ç—Ä–∏–º—É—î–º–æ —Ç–µ–∫—Å—Ç —ñ –ø–µ—Ä–µ–≤–æ–¥–∏–º–æ –≤ –≤–µ–ª–∏–∫—ñ –ª—ñ—Ç–µ—Ä–∏
    
    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –ø—ñ–¥–ø–∏—Å–∫—É
    is_subscribed = await check_subscription(user.id, context)
    
    if not is_subscribed:
        # –Ø–∫—â–æ –Ω–µ –ø—ñ–¥–ø–∏—Å–∞–Ω–∏–π - –ø–æ–∫–∞–∑—É—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –ø—ñ–¥–ø–∏—Å–∫—É
        subscribe_text = f"""
–©–æ–± –∫–æ—Ä–∏—Å—Ç—É–≤–∞—Ç–∏—Å—å –±–æ—Ç–æ–º, –ø–æ—Ç—Ä—ñ–±–Ω–æ –ø—ñ–¥–ø–∏—Å–∞—Ç–∏—Å—å –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª!

–ö–∞–Ω–∞–ª: {config.CHANNEL_USERNAME}

–¢–∞–º –≤–∏ –∑–Ω–∞–π–¥–µ—Ç–µ:
- –ö–æ–¥–∏ —Ñ—ñ–ª—å–º—ñ–≤ –∑ TikTok
- –¶—ñ–∫–∞–≤—ñ –ø—ñ–¥–±—ñ—Ä–∫–∏  
- –ù–æ–≤–∏–Ω–∫–∏ –∫—ñ–Ω–æ

–ü—ñ—Å–ª—è –ø—ñ–¥–ø–∏—Å–∫–∏ –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å "–Ø –ø—ñ–¥–ø–∏—Å–∞–≤—Å—è ‚úì"
"""
        keyboard = [
            [InlineKeyboardButton("–ü—ñ–¥–ø–∏—Å–∞—Ç–∏—Å—å –Ω–∞ –∫–∞–Ω–∞–ª", url=f"https://t.me/{config.CHANNEL_USERNAME[1:]}")],
            [InlineKeyboardButton("–Ø –ø—ñ–¥–ø–∏—Å–∞–≤—Å—è ‚úì", callback_data="check_subscription")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text(subscribe_text, reply_markup=reply_markup)
        return
    
    # –®—É–∫–∞—î–º–æ —Ñ—ñ–ª—å–º –≤ –±–∞–∑—ñ –¥–∞–Ω–∏—Ö
    movie = database.find_movie(message_text)
    
    if movie:
        # –§—ñ–ª—å–º –∑–Ω–∞–π–¥–µ–Ω–æ! –ü–µ—Ä–µ—Å–∏–ª–∞—î–º–æ –ø–æ—Å—Ç –∑ –∫–∞–Ω–∞–ª—É
        try:
            # –ö–æ–ø—ñ—é—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ –∫–∞–Ω–∞–ª—É (–∑ —Ñ–æ—Ç–æ, —Ç–µ–∫—Å—Ç–æ–º, –≤—Å—ñ–º!)
            await context.bot.copy_message(
                chat_id=update.effective_chat.id,
                from_chat_id=movie['chat_id'],
                message_id=movie['message_id']
            )
            
            # –Ø–∫—â–æ —î –ø–æ—Å–∏–ª–∞–Ω–Ω—è - –¥–æ–¥–∞—î–º–æ –∫–Ω–æ–ø–∫—É
            if movie.get('link'):
                keyboard = [
                    [InlineKeyboardButton("üîó –î–∏–≤–∏—Ç–∏—Å—å —Ñ—ñ–ª—å–º", url=movie['link'])]
                ]
                reply_markup = InlineKeyboardMarkup(keyboard)
                
                await update.message.reply_text(
                    "–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫—É —â–æ–± –ø–µ—Ä–µ–π—Ç–∏ –¥–æ —Ñ—ñ–ª—å–º—É:",
                    reply_markup=reply_markup
                )
            
            logger.info(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {user.id} –∑–Ω–∞–π—à–æ–≤ —Ñ—ñ–ª—å–º {message_text}")
            
        except Exception as e:
            # –Ø–∫—â–æ –≤–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, –ø–æ—Å—Ç –≤–∏–¥–∞–ª–µ–Ω–æ –∞–±–æ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π message_id)
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∫–æ–ø—ñ—é–≤–∞–Ω–Ω—ñ –ø–æ—Å—Ç–∞: {e}")
            
            # –í–∏–¥–∞–ª—è—î–º–æ —Ñ—ñ–ª—å–º –∑ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö, –±–æ –≤—ñ–Ω –Ω–µ–≤–∞–ª—ñ–¥–Ω–∏–π
            database.delete_movie(message_text)
            
            await update.message.reply_text(
                f"‚ùå –ü–æ–º–∏–ª–∫–∞! –ü–æ—Å—Ç –¥–ª—è —Ñ—ñ–ª—å–º—É {message_text} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –≤ –∫–∞–Ω–∞–ª—ñ.\n\n"
                f"–§—ñ–ª—å–º –≤–∏–¥–∞–ª–µ–Ω–æ –∑ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö.\n\n"
                f"–ê–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä –º–∞—î –æ–ø—É–±–ª—ñ–∫—É–≤–∞—Ç–∏ –π–æ–≥–æ –∑–∞–Ω–æ–≤–æ –≤ –∫–∞–Ω–∞–ª {config.CHANNEL_USERNAME}"
            )
            
            # –ü–æ–≤—ñ–¥–æ–º–ª—è—î–º–æ –∞–¥–º—ñ–Ω—É
            try:
                await context.bot.send_message(
                    chat_id=config.ADMIN_ID,
                    text=f"‚ö†Ô∏è –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á —Å–ø—Ä–æ–±—É–≤–∞–≤ –∑–Ω–∞–π—Ç–∏ —Ñ—ñ–ª—å–º {message_text}, –∞–ª–µ –ø–æ—Å—Ç –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ!\n\n"
                         f"–§—ñ–ª—å–º –≤–∏–¥–∞–ª–µ–Ω–æ –∑ –±–∞–∑–∏. –û–ø—É–±–ª—ñ–∫—É–π—Ç–µ –π–æ–≥–æ –∑–∞–Ω–æ–≤–æ –≤ –∫–∞–Ω–∞–ª."
                )
            except:
                pass
    else:
        # –§—ñ–ª—å–º –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ
        not_found_text = f"""
–§—ñ–ª—å–º –∑ –∫–æ–¥–æ–º "{message_text}" –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ üòî

–ú–æ–∂–ª–∏–≤—ñ –ø—Ä–∏—á–∏–Ω–∏:
- –ö–æ–¥ –≤–≤–µ–¥–µ–Ω–æ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ
- –§—ñ–ª—å–º —â–µ –Ω–µ –¥–æ–¥–∞–Ω–æ –≤ –±–∞–∑—É

–ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –∫–æ–¥ —Ç–∞ —Å–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑!
"""
        await update.message.reply_text(not_found_text)


# ========== –ê–î–ú–Ü–ù–Ü–°–¢–†–ê–¢–ò–í–ù–Ü –ö–û–ú–ê–ù–î–ò ==========

async def add_movie_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –ö–æ–º–∞–Ω–¥–∞ /add - —Ä—É—á–Ω–µ –¥–æ–¥–∞–≤–∞–Ω–Ω—è —Ñ—ñ–ª—å–º—É (—Ç—ñ–ª—å–∫–∏ –¥–ª—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞)
    –§–æ—Ä–º–∞—Ç: /add –ö–û–î MESSAGE_ID
    –ü—Ä–∏–∫–ª–∞–¥: /add 001 123
    
    –©–æ–± –∑–Ω–∞–π—Ç–∏ MESSAGE_ID:
    1. –í—ñ–¥–∫—Ä–∏–π—Ç–µ –ø–æ—Å—Ç –≤ –∫–∞–Ω–∞–ª—ñ —á–µ—Ä–µ–∑ –±—Ä–∞—É–∑–µ—Ä
    2. –ü–æ–¥–∏–≤—ñ—Ç—å—Å—è –Ω–∞ URL: t.me/channel_name/123 (–¥–µ 123 - —Ü–µ MESSAGE_ID)
    """
    user = update.effective_user
    
    if user.id != config.ADMIN_ID:
        await update.message.reply_text("–¶—è –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç—ñ–ª—å–∫–∏ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—É!")
        return
    
    if len(context.args) < 2:
        await update.message.reply_text(
            "‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç!\n\n"
            "–§–æ—Ä–º–∞—Ç: /add –ö–û–î MESSAGE_ID\n"
            "–ü—Ä–∏–∫–ª–∞–¥: /add 001 123\n\n"
            "–©–æ–± –∑–Ω–∞–π—Ç–∏ MESSAGE_ID:\n"
            "1. –í—ñ–¥–∫—Ä–∏–π—Ç–µ –ø–æ—Å—Ç –≤ –∫–∞–Ω–∞–ª—ñ —á–µ—Ä–µ–∑ –±—Ä–∞—É–∑–µ—Ä\n"
            "2. URL –±—É–¥–µ: t.me/channel_name/123\n"
            "3. –ß–∏—Å–ª–æ 123 - —Ü–µ MESSAGE_ID"
        )
        return
    
    code = context.args[0].upper()
    
    try:
        message_id = int(context.args[1])
    except ValueError:
        await update.message.reply_text("‚ùå MESSAGE_ID –º–∞—î –±—É—Ç–∏ —á–∏—Å–ª–æ–º!")
        return
    
    # –û—Ç—Ä–∏–º—É—î–º–æ ID –∫–∞–Ω–∞–ª—É
    try:
        channel_info = await context.bot.get_chat(config.CHANNEL_USERNAME)
        chat_id = channel_info.id
    except Exception as e:
        await update.message.reply_text(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –ø—Ä–æ –∫–∞–Ω–∞–ª: {e}")
        return
    
    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ —ñ—Å–Ω—É—î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
    try:
        await context.bot.copy_message(
            chat_id=user.id,
            from_chat_id=chat_id,
            message_id=message_id
        )
        await update.message.reply_text("‚úÖ –ü–æ—Å—Ç –∑–Ω–∞–π–¥–µ–Ω–æ! –ó–∞—Ä–∞–∑ –¥–æ–¥–∞–º –≤ –±–∞–∑—É...")
    except Exception as e:
        await update.message.reply_text(
            f"‚ùå –ü–æ–º–∏–ª–∫–∞! –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ ID {message_id} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –≤ –∫–∞–Ω–∞–ª—ñ.\n\n"
            f"–ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ MESSAGE_ID —Ç–∞ —Å–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑."
        )
        return
    
    # –î–æ–¥–∞—î–º–æ —Ñ—ñ–ª—å–º –≤ –±–∞–∑—É
    success = database.add_movie(code, message_id, chat_id, link=None)
    
    if success:
        await update.message.reply_text(
            f"‚úÖ –§—ñ–ª—å–º {code} —É—Å–ø—ñ—à–Ω–æ –¥–æ–¥–∞–Ω–æ!\n\n"
            f"Message ID: {message_id}\n"
            f"Chat ID: {chat_id}\n\n"
            f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ —Ç–µ–ø–µ—Ä –º–æ–∂—É—Ç—å –∑–Ω–∞–π—Ç–∏ –π–æ–≥–æ –∑–∞ –∫–æ–¥–æ–º {code}"
        )
    else:
        await update.message.reply_text(
            f"‚ùå –§—ñ–ª—å–º –∑ –∫–æ–¥–æ–º {code} –≤–∂–µ —ñ—Å–Ω—É—î –≤ –±–∞–∑—ñ!\n\n"
            f"–í–∏–¥–∞–ª—ñ—Ç—å —Å—Ç–∞—Ä–∏–π: /delete {code}"
        )


async def list_movies_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –ö–æ–º–∞–Ω–¥–∞ /list - –ø–æ–∫–∞–∑—É—î –≤—Å—ñ –∫–æ–¥–∏ —Ñ—ñ–ª—å–º—ñ–≤ (—Ç—ñ–ª—å–∫–∏ –¥–ª—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞)
    """
    user = update.effective_user
    
    if user.id != config.ADMIN_ID:
        await update.message.reply_text("–¶—è –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç—ñ–ª—å–∫–∏ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—É!")
        return
    
    movies = database.get_all_movies()
    
    if not movies:
        await update.message.reply_text("–ë–∞–∑–∞ –¥–∞–Ω–∏—Ö –ø–æ—Ä–æ–∂–Ω—è!\n\n–ü—É–±–ª—ñ–∫—É–π—Ç–µ –ø–æ—Å—Ç–∏ –≤ –∫–∞–Ω–∞–ª –∑ —Ç–µ–∫—Å—Ç–æ–º '–ö–æ–¥: F001'")
        return
    
    # –§–æ—Ä–º—É—î–º–æ —Å–ø–∏—Å–æ–∫ –∫–æ–¥—ñ–≤
    movies_text = f"üìä –í—Å—å–æ–≥–æ —Ñ—ñ–ª—å–º—ñ–≤ –≤ –±–∞–∑—ñ: {len(movies)}\n\n"
    movies_text += "–ö–æ–¥–∏:\n"
    
    for movie in movies:
        movies_text += f"‚Ä¢ {movie['code']} (message_id: {movie['message_id']})\n"
    
    # Telegram –º–∞—î –ª—ñ–º—ñ—Ç –Ω–∞ –¥–æ–≤–∂–∏–Ω—É –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è (4096 —Å–∏–º–≤–æ–ª—ñ–≤)
    if len(movies_text) > 4000:
        await update.message.reply_text("–ó–∞–Ω–∞–¥—Ç–æ –±–∞–≥–∞—Ç–æ —Ñ—ñ–ª—å–º—ñ–≤! –ü–æ–∫–∞–∑—É—é –ø–µ—Ä—à—ñ...")
        movies_text = movies_text[:4000]
    
    await update.message.reply_text(movies_text)


async def delete_movie_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –ö–æ–º–∞–Ω–¥–∞ /delete - –≤–∏–¥–∞–ª—è—î —Ñ—ñ–ª—å–º (—Ç—ñ–ª—å–∫–∏ –¥–ª—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞)
    –§–æ—Ä–º–∞—Ç: /delete –ö–û–î
    –ü—Ä–∏–∫–ª–∞–¥: /delete F001
    """
    user = update.effective_user
    
    if user.id != config.ADMIN_ID:
        await update.message.reply_text("–¶—è –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç—ñ–ª—å–∫–∏ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—É!")
        return
    
    if not context.args:
        await update.message.reply_text(
            "–í–∫–∞–∂—ñ—Ç—å –∫–æ–¥ —Ñ—ñ–ª—å–º—É!\n\n"
            "–ü—Ä–∏–∫–ª–∞–¥: /delete F001"
        )
        return
    
    code = context.args[0].upper()
    
    # –í–∏–¥–∞–ª—è—î–º–æ —Ñ—ñ–ª—å–º
    success = database.delete_movie(code)
    
    if success:
        await update.message.reply_text(f"–§—ñ–ª—å–º –∑ –∫–æ–¥–æ–º {code} –≤–∏–¥–∞–ª–µ–Ω–æ!")
    else:
        await update.message.reply_text(f"–§—ñ–ª—å–º –∑ –∫–æ–¥–æ–º {code} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ!")


# ========== –ê–î–ú–Ü–ù–Ü–°–¢–†–ê–¢–ò–í–ù–ê –ü–ê–ù–ï–õ–¨ –ë–ê–ó–ò –î–ê–ù–ò–• ==========

async def database_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –ö–æ–º–∞–Ω–¥–∞ /database - –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–∏–≤–Ω–∞ –ø–∞–Ω–µ–ª—å –¥–ª—è –∫–µ—Ä—É–≤–∞–Ω–Ω—è –±–∞–∑–æ—é –¥–∞–Ω–∏—Ö
    –ü–æ–∫–∞–∑—É—î –≤—Å—ñ —Ñ—ñ–ª—å–º–∏ –∑ –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è/–≤–∏–¥–∞–ª–µ–Ω–Ω—è
    """
    user = update.effective_user
    
    if user.id != config.ADMIN_ID:
        await update.message.reply_text("–¶—è –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç—ñ–ª—å–∫–∏ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—É!")
        return
    
    movies = database.get_all_movies()
    
    if not movies:
        await update.message.reply_text(
            "–ë–∞–∑–∞ –¥–∞–Ω–∏—Ö –ø–æ—Ä–æ–∂–Ω—è!\n\n"
            "–ü—É–±–ª—ñ–∫—É–π—Ç–µ –ø–æ—Å—Ç–∏ –≤ –∫–∞–Ω–∞–ª –∑ —Ç–µ–∫—Å—Ç–æ–º '–ö–æ–¥: F001'"
        )
        return
    
    # –§–æ—Ä–º—É—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑—ñ —Å–ø–∏—Å–∫–æ–º —Ñ—ñ–ª—å–º—ñ–≤
    text = f"üìä –ë–∞–∑–∞ –¥–∞–Ω–∏—Ö —Ñ—ñ–ª—å–º—ñ–≤ ({len(movies)} —Ñ—ñ–ª—å–º—ñ–≤)\n\n"
    
    # –°–ª–æ–≤–Ω–∏–∫ –∑ –Ω–∞–∑–≤–∞–º–∏ —Ñ—ñ–ª—å–º—ñ–≤
    movie_titles = {
        '001': '–ù—ñ—Ö—Ç–æ2',
        '002': '–ì–æ–ª–æ–≤–∏ –¥–µ—Ä–∂–∞–≤'
    }
    
    for i, movie in enumerate(movies, 1):
        # –û—Ç—Ä–∏–º—É—î–º–æ –Ω–∞–∑–≤—É –∑ –Ω–∞—à–æ–≥–æ —Å–ª–æ–≤–Ω–∏–∫–∞
        title = movie_titles.get(movie['code'], '–ù–µ–≤—ñ–¥–æ–º–∞ –Ω–∞–∑–≤–∞')
        text += f"{i}. **{movie['code']}** - {title}\n"
    
    # –°—Ç–≤–æ—Ä—é—î–º–æ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–æ–∂–Ω–æ–≥–æ —Ñ—ñ–ª—å–º—É
    keyboard = []
    
    # –ì—Ä—É–ø—É—î–º–æ –∫–Ω–æ–ø–∫–∏ –ø–æ 2 –≤ —Ä—è–¥
    for i in range(0, len(movies), 2):
        row = []
        for j in range(2):
            if i + j < len(movies):
                movie = movies[i + j]
                row.append(InlineKeyboardButton(
                    f"üóëÔ∏è {movie['code']}", 
                    callback_data=f"delete_{movie['code']}"
                ))
        keyboard.append(row)
    
    # –î–æ–¥–∞—î–º–æ –∫–Ω–æ–ø–∫—É "–û–Ω–æ–≤–∏—Ç–∏"
    keyboard.append([InlineKeyboardButton("üîÑ –û–Ω–æ–≤–∏—Ç–∏", callback_data="refresh_database")])
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await update.message.reply_text(
        text,
        reply_markup=reply_markup,
        parse_mode='Markdown'
    )


# ========== –ö–û–ú–ê–ù–î–ê –°–ö–ê–ù–£–í–ê–ù–ù–Ø ==========

async def scan_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –ö–æ–º–∞–Ω–¥–∞ /scan - —Å–∫–∞–Ω—É—î –∫–∞–Ω–∞–ª —ñ –≤—ñ–¥–Ω–æ–≤–ª—é—î –±–∞–∑—É –¥–∞–Ω–∏—Ö
    """
    user = update.effective_user
    
    if user.id != config.ADMIN_ID:
        await update.message.reply_text("–¶—è –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç—ñ–ª—å–∫–∏ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—É!")
        return
    
    await update.message.reply_text("üîÑ –°–∫–∞–Ω—É–≤–∞–Ω–Ω—è –∫–∞–Ω–∞–ª—É... –¶–µ –º–æ–∂–µ –∑–∞–π–Ω—è—Ç–∏ –∫—ñ–ª—å–∫–∞ —Ö–≤–∏–ª–∏–Ω.")
    
    try:
        # –ó–∞–ø—É—Å–∫–∞—î–º–æ Pyrogram —Å–∫–∞–Ω–µ—Ä
        movies_count = await scanner.scan_channel_history()
        
        # –ü–æ–∫–∞–∑—É—î–º–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        movies = database.get_all_movies()
        result_text = f"OK –°–∫–∞–Ω—É–≤–∞–Ω–Ω—è –∑–∞–≤–µ—Ä—à–µ–Ω–æ!\n\n"
        result_text += f"DB –î–æ–¥–∞–Ω–æ –Ω–æ–≤–∏—Ö —Ñ—ñ–ª—å–º—ñ–≤: {movies_count}\n"
        result_text += f"DB –í—Å—å–æ–≥–æ –≤ –±–∞–∑—ñ: {len(movies)}\n\n"
        
        if movies:
            result_text += "–§—ñ–ª—å–º–∏ –≤ –±–∞–∑—ñ:\n"
            for movie in movies:
                result_text += f"‚Ä¢ {movie['code']} (ID: {movie['message_id']})\n"
        else:
            result_text += "–ë–∞–∑–∞ –¥–∞–Ω–∏—Ö –ø–æ—Ä–æ–∂–Ω—è"
        
        await update.message.reply_text(result_text)
        
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ —Å–∫–∞–Ω—É–≤–∞–Ω–Ω—è: {e}")
        await update.message.reply_text(
            f"‚ùå –ü–æ–º–∏–ª–∫–∞ —Å–∫–∞–Ω—É–≤–∞–Ω–Ω—è: {e}\n\n"
            f"–ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è API_ID —Ç–∞ API_HASH –≤ config.py"
        )


# ========== –°–ö–ê–ù–£–í–ê–ù–ù–Ø –ö–ê–ù–ê–õ–£ ==========

async def scan_channel_for_movies(context: ContextTypes.DEFAULT_TYPE):
    """
    –°–∫–∞–Ω—É—î –∫–∞–Ω–∞–ª —ñ –≤—ñ–¥–Ω–æ–≤–ª—é—î –±–∞–∑—É –¥–∞–Ω–∏—Ö –∑ —É—Å—ñ—Ö –ø–æ—Å—Ç—ñ–≤
    
    –í–ê–ñ–õ–ò–í–û: –¶—è —Ñ—É–Ω–∫—Ü—ñ—è –ù–ï –ú–û–ñ–ï –æ—Ç—Ä–∏–º–∞—Ç–∏ —Å—Ç–∞—Ä—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —á–µ—Ä–µ–∑ –æ–±–º–µ–∂–µ–Ω–Ω—è Bot API!
    
    –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó:
    1. –í–∏–¥–∞–ª—ñ—Ç—å –±–∞–∑—É –¥–∞–Ω–∏—Ö (movies.db)
    2. –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç—ñ—Ç—å –±–æ—Ç–∞
    3. –û–ø—É–±–ª—ñ–∫—É–π—Ç–µ –∑–∞–Ω–æ–≤–æ –≤—Å—ñ –ø–æ—Å—Ç–∏ –≤ –∫–∞–Ω–∞–ª
    4. –ë–æ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ —ó—Ö –¥–æ–¥–∞—Å—Ç—å (—Ñ—É–Ω–∫—Ü—ñ—è handle_channel_post)
    
    –ê–ë–û –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ Pyrogram –¥–ª—è —Ä–µ–∞–ª—å–Ω–æ–≥–æ —Å–∫–∞–Ω—É–≤–∞–Ω–Ω—è
    """
    try:
        print("‚ö†Ô∏è –£–í–ê–ì–ê: –°–∫–∞–Ω—É–≤–∞–Ω–Ω—è –∫–∞–Ω–∞–ª—É —á–µ—Ä–µ–∑ Bot API –Ω–µ–º–æ–∂–ª–∏–≤–µ!")
        print("")
        print("Telegram Bot API –Ω–µ –¥–æ–∑–≤–æ–ª—è—î –æ—Ç—Ä–∏–º—É–≤–∞—Ç–∏ —ñ—Å—Ç–æ—Ä—ñ—é –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å –∑ –∫–∞–Ω–∞–ª—É.")
        print("")
        print("–†—ñ—à–µ–Ω–Ω—è:")
        print("1. –ê–í–¢–û–ú–ê–¢–ò–ß–ù–ï (—Ä–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–æ):")
        print("   - –û–ø—É–±–ª—ñ–∫—É–π—Ç–µ –∑–∞–Ω–æ–≤–æ –≤—Å—ñ –ø–æ—Å—Ç–∏ –≤ –∫–∞–Ω–∞–ª")
        print("   - –ë–æ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ —ó—Ö –¥–æ–¥–∞—Å—Ç—å")
        print("")
        print("2. –†–£–ß–ù–ï:")
        print("   - –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ /add –¥–ª—è –∫–æ–∂–Ω–æ–≥–æ —Ñ—ñ–ª—å–º—É –æ–∫—Ä–µ–º–æ")
        print("")
        print("3. –ß–ï–†–ï–ó PYROGRAM:")
        print("   - –í—Å—Ç–∞–Ω–æ–≤—ñ—Ç—å pyrogram: pip install pyrogram")
        print("   - –°—Ç–≤–æ—Ä—ñ—Ç—å –æ–∫—Ä–µ–º–∏–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è —Å–∫–∞–Ω—É–≤–∞–Ω–Ω—è")
        print("")
        
        # –ù–µ –æ—á–∏—â–∞—î–º–æ –±–∞–∑—É –¥–∞–Ω–∏—Ö!
        movies = database.get_all_movies()
        print(f"üìä –ü–æ—Ç–æ—á–Ω–∞ –±–∞–∑–∞ –¥–∞–Ω–∏—Ö: {len(movies)} —Ñ—ñ–ª—å–º—ñ–≤")
        
        return
        
    except Exception as e:
        print(f"–ü–æ–º–∏–ª–∫–∞: {e}")

# ========== –ì–û–õ–û–í–ù–ê –§–£–ù–ö–¶–Ü–Ø ==========

async def start_scanner_background():
    """–ó–∞–ø—É—Å–∫ —Å–∫–∞–Ω–µ—Ä–∞ –≤ —Ñ–æ–Ω–æ–≤–æ–º—É —Ä–µ–∂–∏–º—ñ"""
    try:
        await scanner.start()
        logger.info("‚úÖ Pyrogram —Å–∫–∞–Ω–µ—Ä –∑–∞–ø—É—â–µ–Ω–æ!")
        
        # –ó–∞–ø—É—Å–∫–∞—î–º–æ –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥ –Ω–æ–≤–∏—Ö –ø–æ—Å—Ç—ñ–≤
        await scanner.monitor_new_posts()
    except Exception as e:
        logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–ø—É—Å–∫—É —Å–∫–∞–Ω–µ—Ä–∞: {e}")

def main():
    """
    –ì–æ–ª–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è - –∑–∞–ø—É—Å–∫–∞—î –±–æ—Ç–∞
    """
    print("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
    
    # –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ –±–∞–∑—É –¥–∞–Ω–∏—Ö
    database.init_database()
    print("–ë–∞–∑–∞ –¥–∞–Ω–∏—Ö –≥–æ—Ç–æ–≤–∞!")
    
    # –ü–æ–∫–∞–∑—É—î–º–æ —Å—Ç–∞–Ω –±–∞–∑–∏ –¥–∞–Ω–∏—Ö
    movies = database.get_all_movies()
    print(f"DB –ë–∞–∑–∞ –¥–∞–Ω–∏—Ö: {len(movies)} —Ñ—ñ–ª—å–º—ñ–≤")
    if movies:
        print("–§—ñ–ª—å–º–∏ –≤ –±–∞–∑—ñ:")
        for movie in movies:
            print(f"  - {movie['code']} (ID: {movie['message_id']})")
    else:
        print("–ë–∞–∑–∞ –¥–∞–Ω–∏—Ö –ø–æ—Ä–æ–∂–Ω—è")
    
    # –°—Ç–≤–æ—Ä—é—î–º–æ –¥–æ–¥–∞—Ç–æ–∫ –±–æ—Ç–∞ (–≤–∏–º–∏–∫–∞—î–º–æ job_queue, –±–æ –≤—ñ–Ω –Ω–∞–º –Ω–µ –ø–æ—Ç—Ä—ñ–±–µ–Ω)
    application = (
        Application.builder()
        .token(config.BOT_TOKEN)
        .job_queue(None)  # –í–∏–º–∏–∫–∞—î–º–æ –ø–ª–∞–Ω—É–≤–∞–ª—å–Ω–∏–∫ –∑–∞–≤–¥–∞–Ω—å
        .build()
    )
    
    # –†–µ—î—Å—Ç—Ä—É—î–º–æ –æ–±—Ä–æ–±–Ω–∏–∫–∏ –∫–æ–º–∞–Ω–¥
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("help", start))  # /help –ø—Ä–∞—Ü—é—î —Ç–∞–∫ —Å–∞–º–æ —è–∫ /start
    application.add_handler(CommandHandler("add", add_movie_command))  # –†—É—á–Ω–µ –¥–æ–¥–∞–≤–∞–Ω–Ω—è —Ñ—ñ–ª—å–º—É
    application.add_handler(CommandHandler("list", list_movies_command))
    application.add_handler(CommandHandler("delete", delete_movie_command))
    application.add_handler(CommandHandler("database", database_command))  # –ù–æ–≤–∞ –∫–æ–º–∞–Ω–¥–∞!
    application.add_handler(CommandHandler("scan", scan_command))  # –ö–æ–º–∞–Ω–¥–∞ —Å–∫–∞–Ω—É–≤–∞–Ω–Ω—è –∫–∞–Ω–∞–ª—É
    
    # –†–µ—î—Å—Ç—Ä—É—î–º–æ –æ–±—Ä–æ–±–Ω–∏–∫ –∫–Ω–æ–ø–æ–∫
    application.add_handler(CallbackQueryHandler(button_callback))
    
    # ‚≠ê –ù–û–í–ò–ô –û–ë–†–û–ë–ù–ò–ö! –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –∑—á–∏—Ç—É—î –ø–æ—Å—Ç–∏ –∑ –∫–∞–Ω–∞–ª—É
    application.add_handler(MessageHandler(filters.ChatType.CHANNEL, handle_channel_post))
    
    # –†–µ—î—Å—Ç—Ä—É—î–º–æ –æ–±—Ä–æ–±–Ω–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤–∏—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å –≤—ñ–¥ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, search_movie))
    
    # –ó–∞–ø—É—Å–∫–∞—î–º–æ –±–æ—Ç–∞
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω–æ! –ù–∞—Ç–∏—Å–Ω—ñ—Ç—å Ctrl+C –¥–ª—è –∑—É–ø–∏–Ω–∫–∏.")
    print("–í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ /scan –¥–ª—è –≤—ñ–¥–Ω–æ–≤–ª–µ–Ω–Ω—è –±–∞–∑–∏ –¥–∞–Ω–∏—Ö –∑ –∫–∞–Ω–∞–ª—É.")
    
    # –ó–∞–ø—É—Å–∫–∞—î–º–æ —Å–∫–∞–Ω–µ—Ä –≤ —Ñ–æ–Ω–æ–≤–æ–º—É —Ä–µ–∂–∏–º—ñ (—Ç—ñ–ª—å–∫–∏ —è–∫—â–æ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–æ API)
    if config.API_ID != 'YOUR_API_ID' and config.API_HASH != 'YOUR_API_HASH':
        import asyncio
        import threading
        
        def run_scanner():
            asyncio.run(start_scanner_background())
        
        scanner_thread = threading.Thread(target=run_scanner, daemon=True)
        scanner_thread.start()
        print("OK Pyrogram —Å–∫–∞–Ω–µ—Ä –∑–∞–ø—É—â–µ–Ω–æ!")
    else:
        print("WARN Pyrogram –Ω–µ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–æ. –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ /add –¥–ª—è —Ä—É—á–Ω–æ–≥–æ –¥–æ–¥–∞–≤–∞–Ω–Ω—è —Ñ—ñ–ª—å–º—ñ–≤.")
    
    application.run_polling(allowed_updates=Update.ALL_TYPES)


# –Ø–∫—â–æ —Ñ–∞–π–ª –∑–∞–ø—É—â–µ–Ω–æ –Ω–∞–ø—Ä—è–º—É - –∑–∞–ø—É—Å–∫–∞—î–º–æ –±–æ—Ç–∞
if __name__ == '__main__':
    main()

