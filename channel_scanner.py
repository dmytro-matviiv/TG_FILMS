# channel_scanner.py - –°–∫–∞–Ω–µ—Ä –∫–∞–Ω–∞–ª—É –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ–≥–æ –¥–æ–¥–∞–≤–∞–Ω–Ω—è —Ñ—ñ–ª—å–º—ñ–≤
import asyncio
import re
import logging
from pyrogram import Client
from pyrogram.types import Message
from pyrogram.errors import FloodWait, AuthKeyUnregistered
import config
import database

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

class ChannelScanner:
    """
    –ö–ª–∞—Å –¥–ª—è —Å–∫–∞–Ω—É–≤–∞–Ω–Ω—è –∫–∞–Ω–∞–ª—É —Ç–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ–≥–æ –¥–æ–¥–∞–≤–∞–Ω–Ω—è —Ñ—ñ–ª—å–º—ñ–≤
    """
    
    def __init__(self):
        self.client = None
        self.is_running = False
        self.waiting_for_code = False
        self.auth_state = None
        
    async def start(self):
        """–ó–∞–ø—É—Å–∫ Pyrogram –∫–ª—ñ—î–Ω—Ç–∞"""
        try:
            # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–æ API
            if config.API_ID == 'YOUR_API_ID' or config.API_HASH == 'YOUR_API_HASH':
                logger.error("‚ùå API_ID –∞–±–æ API_HASH –Ω–µ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–æ!")
                return False
            
            # üîç –î–ï–¢–ê–õ–¨–ù–ê –î–Ü–ê–ì–ù–û–°–¢–ò–ö–ê API –ö–õ–Æ–ß–Ü–í
            logger.info("üîß –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—é Pyrogram –∫–ª—ñ—î–Ω—Ç...")
            logger.info(f"üìä API_ID: {config.API_ID}")
            logger.info(f"üìä API_HASH: {config.API_HASH[:10]}...")
            logger.info(f"üìä PHONE_NUMBER: {config.PHONE_NUMBER}")
            
            # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ API_ID —î —á–∏—Å–ª–æ–º
            try:
                api_id_int = int(config.API_ID)
                logger.info(f"‚úÖ API_ID –≤–∞–ª—ñ–¥–Ω–∏–π: {api_id_int}")
            except ValueError:
                logger.error(f"‚ùå API_ID –Ω–µ —î —á–∏—Å–ª–æ–º: {config.API_ID}")
                return False
            
            self.client = Client(
                "film_scanner",
                api_id=config.API_ID,
                api_hash=config.API_HASH,
                phone_number=config.PHONE_NUMBER,
                in_memory=True  # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –ø–∞–º'—è—Ç—å –∑–∞–º—ñ—Å—Ç—å —Ñ–∞–π–ª—ñ–≤
            )
            
            # –ó–∞–ø—É—Å–∫–∞—î–º–æ –∫–ª—ñ—î–Ω—Ç –±–µ–∑ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó
            await self.client.connect()
            
            # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ –ø–æ—Ç—Ä—ñ–±–Ω–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—è
            if not await self.client.is_user_authorized():
                logger.info("üì± –ü–æ—Ç—Ä—ñ–±–Ω–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—è. –û—á—ñ–∫—É—é –∫–æ–¥ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è...")
                self.waiting_for_code = True
                return "waiting_for_code"
            
            logger.info("‚úÖ Pyrogram –∫–ª—ñ—î–Ω—Ç —É—Å–ø—ñ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω–æ!")
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–ø—É—Å–∫—É Pyrogram: {e}")
            
            # üîß –ê–í–¢–û–ú–ê–¢–ò–ß–ù–ï –í–ò–î–ê–õ–ï–ù–ù–Ø SESSION –§–ê–ô–õ–Ü–í –ü–†–ò –ü–û–ú–ò–õ–¶–Ü –ê–í–¢–û–†–ò–ó–ê–¶–Ü–á
            if "AUTH_KEY_UNREGISTERED" in str(e):
                logger.info("üßπ –í–∏–¥–∞–ª—è—é –Ω–µ–≤–∞–ª—ñ–¥–Ω—ñ session —Ñ–∞–π–ª–∏...")
                try:
                    import os
                    session_files = ["film_scanner.session", "film_scanner.session-journal"]
                    for file in session_files:
                        if os.path.exists(file):
                            os.remove(file)
                            logger.info(f"‚úÖ –í–∏–¥–∞–ª–µ–Ω–æ: {file}")
                except Exception as cleanup_error:
                    logger.error(f"‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –≤–∏–¥–∞–ª–∏—Ç–∏ session —Ñ–∞–π–ª–∏: {cleanup_error}")
            
            self.client = None  # –°–∫–∏–¥–∞—î–º–æ –∫–ª—ñ—î–Ω—Ç –ø—Ä–∏ –ø–æ–º–∏–ª—Ü—ñ
            return False
    
    async def complete_auth(self, code):
        """–ó–∞–≤–µ—Ä—à–µ–Ω–Ω—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó –∑ –∫–æ–¥–æ–º"""
        try:
            if not self.client or not self.waiting_for_code:
                return False, "–ö–ª—ñ—î–Ω—Ç –Ω–µ –≥–æ—Ç–æ–≤–∏–π –¥–æ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó"
            
            # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –∫–æ–¥ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è
            await self.client.sign_in(code)
            
            self.waiting_for_code = False
            logger.info("‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—è —É—Å–ø—ñ—à–Ω–∞!")
            return True, "–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞"
            
        except Exception as e:
            logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó: {e}")
            return False, str(e)
    
    async def stop(self):
        """–ó—É–ø–∏–Ω–∫–∞ Pyrogram –∫–ª—ñ—î–Ω—Ç–∞"""
        if self.client:
            await self.client.stop()
            logger.info("STOP Pyrogram –∫–ª—ñ—î–Ω—Ç –∑—É–ø–∏–Ω–µ–Ω–æ!")
    
    def parse_movie_info(self, text: str) -> dict:
        """
        –ü–∞—Ä—Å–∏—Ç—å —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ —Ñ—ñ–ª—å–º –∑ —Ç–µ–∫—Å—Ç—É –ø–æ—Å—Ç–∞
        
        –û—á—ñ–∫—É–≤–∞–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç:
        –ö–æ–¥: 002
        –ù–∞–∑–≤–∞: –ì–æ–ª–æ–≤–∏ –¥–µ—Ä–∂–∞–≤
        –†—ñ–∫: 2025
        –û–ø–∏—Å: –û–ø–∏—Å —Ñ—ñ–ª—å–º—É...
        """
        movie_info = {
            'code': None,
            'title': None,
            'year': None,
            'description': None
        }
        
        if not text:
            return movie_info
        
        # –®—É–∫–∞—î–º–æ –∫–æ–¥
        code_match = re.search(r'[–ö–∫][–û–æ][–î–¥]:\s*([A-Za-z0-9]+)', text)
        if code_match:
            movie_info['code'] = code_match.group(1).upper()
        
        # –®—É–∫–∞—î–º–æ –Ω–∞–∑–≤—É
        title_match = re.search(r'[–ù–Ω][–ê–∞][–ó–∑][–í–≤][–ê–∞]:\s*(.+)', text)
        if title_match:
            movie_info['title'] = title_match.group(1).strip()
        
        # –®—É–∫–∞—î–º–æ —Ä—ñ–∫
        year_match = re.search(r'[–†—Ä][–Ü—ñ][–ö–∫]:\s*(\d{4})', text)
        if year_match:
            movie_info['year'] = year_match.group(1)
        
        # –®—É–∫–∞—î–º–æ –æ–ø–∏—Å
        desc_match = re.search(r'[–û–æ][–ü–ø][–ò–∏][–°—Å]:\s*(.+)', text, re.DOTALL)
        if desc_match:
            movie_info['description'] = desc_match.group(1).strip()
        
        return movie_info
    
    async def scan_channel_history(self):
        """
        –°–∫–∞–Ω—É—î –≤—Å—é —ñ—Å—Ç–æ—Ä—ñ—é –∫–∞–Ω–∞–ª—É —Ç–∞ –¥–æ–¥–∞—î —Ñ—ñ–ª—å–º–∏ –≤ –±–∞–∑—É
        """
        try:
            logger.info("SCAN –ü–æ—á–∏–Ω–∞—é —Å–∫–∞–Ω—É–≤–∞–Ω–Ω—è –∫–∞–Ω–∞–ª—É...")
            
            # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ –∫–ª—ñ—î–Ω—Ç —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ
            if not self.client:
                logger.error("‚ùå Pyrogram –∫–ª—ñ—î–Ω—Ç –Ω–µ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ!")
                return 0
            
            # –û—Ç—Ä–∏–º—É—î–º–æ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –∫–∞–Ω–∞–ª
            channel_username = config.CHANNEL_USERNAME.lstrip('@')
            channel = await self.client.get_chat(f"@{channel_username}")
            
            logger.info(f"CHANNEL –°–∫–∞–Ω—É–≤–∞–Ω–Ω—è –∫–∞–Ω–∞–ª—É: {channel.title} (ID: {channel.id})")
            
            movies_added = 0
            messages_processed = 0
            
            # –û—Ç—Ä–∏–º—É—î–º–æ –≤—Å—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ –∫–∞–Ω–∞–ª—É
            async for message in self.client.get_chat_history(channel.id):
                messages_processed += 1
                
                # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ —Ü–µ –ø–æ—Å—Ç –∑ —Ñ—ñ–ª—å–º–æ–º
                if message.text or message.caption:
                    text = message.text or message.caption
                    movie_info = self.parse_movie_info(text)
                    
                    # –Ø–∫—â–æ –∑–Ω–∞–π—à–ª–∏ –∫–æ–¥ —Ñ—ñ–ª—å–º—É
                    if movie_info['code']:
                        # –î–æ–¥–∞—î–º–æ –≤ –±–∞–∑—É –¥–∞–Ω–∏—Ö
                        success = database.add_movie(
                            code=movie_info['code'],
                            message_id=message.id,
                            chat_id=channel.id,
                            link=None  # –ú–æ–∂–Ω–∞ –¥–æ–¥–∞—Ç–∏ –ø–æ—à—É–∫ –ø–æ—Å–∏–ª–∞–Ω—å
                        )
                        
                        if success:
                            movies_added += 1
                            logger.info(f"OK –î–æ–¥–∞–Ω–æ —Ñ—ñ–ª—å–º: {movie_info['code']} - {movie_info['title']}")
                        else:
                            logger.warning(f"WARN –§—ñ–ª—å–º {movie_info['code']} –≤–∂–µ —ñ—Å–Ω—É—î –≤ –±–∞–∑—ñ")
                
                # –õ–æ–≥—É—î–º–æ –ø—Ä–æ–≥—Ä–µ—Å –∫–æ–∂–Ω—ñ 10 –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
                if messages_processed % 10 == 0:
                    logger.info(f"PROGRESS –û–±—Ä–æ–±–ª–µ–Ω–æ: {messages_processed} –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å, –¥–æ–¥–∞–Ω–æ: {movies_added} —Ñ—ñ–ª—å–º—ñ–≤")
            
            logger.info(f"DONE –°–∫–∞–Ω—É–≤–∞–Ω–Ω—è –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
            logger.info(f"SUMMARY –ü—ñ–¥—Å—É–º–æ–∫: –æ–±—Ä–æ–±–ª–µ–Ω–æ {messages_processed} –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å, –¥–æ–¥–∞–Ω–æ {movies_added} —Ñ—ñ–ª—å–º—ñ–≤")
            
            return movies_added
            
        except Exception as e:
            logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ —Å–∫–∞–Ω—É–≤–∞–Ω–Ω—è –∫–∞–Ω–∞–ª—É: {e}")
            return 0
    
    async def monitor_new_posts(self):
        """
        –ú–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥ –Ω–æ–≤–∏—Ö –ø–æ—Å—Ç—ñ–≤ –≤ —Ä–µ–∞–ª—å–Ω–æ–º—É —á–∞—Å—ñ
        """
        try:
            logger.info("MONITOR –ü–æ—á–∏–Ω–∞—é –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥ –Ω–æ–≤–∏—Ö –ø–æ—Å—Ç—ñ–≤...")
            
            # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ –∫–ª—ñ—î–Ω—Ç —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ
            if not self.client:
                logger.error("‚ùå Pyrogram –∫–ª—ñ—î–Ω—Ç –Ω–µ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ –¥–ª—è –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É!")
                return
            
            channel_username = config.CHANNEL_USERNAME.lstrip('@')
            channel = await self.client.get_chat(f"@{channel_username}")
            
            # –°–ª—É—Ö–∞—î–º–æ –Ω–æ–≤—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤ –∫–∞–Ω–∞–ª—ñ
            async for message in self.client.get_chat_history(channel.id, limit=1):
                # –¶–µ –±—É–¥–µ –æ—Å—Ç–∞–Ω–Ω—î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
                pass
            
            # –¢–µ–ø–µ—Ä —Å–ª—É—Ö–∞—î–º–æ –Ω–æ–≤—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
            @self.client.on_message()
            async def handle_new_message(client, message: Message):
                # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ —Ü–µ –Ω–∞—à –∫–∞–Ω–∞–ª
                if message.chat.id == channel.id:
                    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ —Ü–µ –ø–æ—Å—Ç –∑ —Ñ—ñ–ª—å–º–æ–º
                    if message.text or message.caption:
                        text = message.text or message.caption
                        movie_info = self.parse_movie_info(text)
                        
                        # –Ø–∫—â–æ –∑–Ω–∞–π—à–ª–∏ –∫–æ–¥ —Ñ—ñ–ª—å–º—É
                        if movie_info['code']:
                            # –î–æ–¥–∞—î–º–æ –≤ –±–∞–∑—É –¥–∞–Ω–∏—Ö
                            success = database.add_movie(
                                code=movie_info['code'],
                                message_id=message.id,
                                chat_id=channel.id,
                                link=None
                            )
                            
                            if success:
                                logger.info(f"NEW –ù–æ–≤–∏–π —Ñ—ñ–ª—å–º –¥–æ–¥–∞–Ω–æ: {movie_info['code']} - {movie_info['title']}")
                            else:
                                logger.warning(f"WARN –§—ñ–ª—å–º {movie_info['code']} –≤–∂–µ —ñ—Å–Ω—É—î –≤ –±–∞–∑—ñ")
            
            # –ó–∞–ø—É—Å–∫–∞—î–º–æ –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥
            # await self.client.idle()  # –¶–µ–π –º–µ—Ç–æ–¥ –Ω–µ —ñ—Å–Ω—É—î –≤ –Ω–æ–≤—ñ–π –≤–µ—Ä—Å—ñ—ó Pyrogram
            # –ó–∞–º—ñ—Å—Ç—å —Ü—å–æ–≥–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –Ω–µ—Å–∫—ñ–Ω—á–µ–Ω–Ω–∏–π —Ü–∏–∫–ª
            while True:
                await asyncio.sleep(1)
            
        except Exception as e:
            logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É: {e}")
    
    async def run_full_scan(self):
        """
        –ü–æ–≤–Ω–µ —Å–∫–∞–Ω—É–≤–∞–Ω–Ω—è: —ñ—Å—Ç–æ—Ä—ñ—è + –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥ –Ω–æ–≤–∏—Ö –ø–æ—Å—Ç—ñ–≤
        """
        try:
            # –°–ø–æ—á–∞—Ç–∫—É —Å–∫–∞–Ω—É—î–º–æ —ñ—Å—Ç–æ—Ä—ñ—é
            movies_count = await self.scan_channel_history()
            
            if movies_count > 0:
                logger.info(f"‚úÖ –°–∫–∞–Ω—É–≤–∞–Ω–Ω—è –∑–∞–≤–µ—Ä—à–µ–Ω–æ! –î–æ–¥–∞–Ω–æ {movies_count} —Ñ—ñ–ª—å–º—ñ–≤")
            else:
                logger.info("‚ÑπÔ∏è –ù–æ–≤—ñ —Ñ—ñ–ª—å–º–∏ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
            
            # –ü–æ—Ç—ñ–º –∑–∞–ø—É—Å–∫–∞—î–º–æ –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥
            logger.info("üëÇ –ó–∞–ø—É—Å–∫–∞—é –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥ –Ω–æ–≤–∏—Ö –ø–æ—Å—Ç—ñ–≤...")
            await self.monitor_new_posts()
            
        except Exception as e:
            logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø–æ–≤–Ω–æ–≥–æ —Å–∫–∞–Ω—É–≤–∞–Ω–Ω—è: {e}")

# –ì–ª–æ–±–∞–ª—å–Ω–∏–π –µ–∫–∑–µ–º–ø–ª—è—Ä —Å–∫–∞–Ω–µ—Ä–∞
scanner = ChannelScanner()

async def start_scanner():
    """–ó–∞–ø—É—Å–∫ —Å–∫–∞–Ω–µ—Ä–∞"""
    success = await scanner.start()
    if success:
        await scanner.run_full_scan()
    else:
        logger.error("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–ø—É—Å—Ç–∏—Ç–∏ —Å–∫–∞–Ω–µ—Ä")

async def stop_scanner():
    """–ó—É–ø–∏–Ω–∫–∞ —Å–∫–∞–Ω–µ—Ä–∞"""
    await scanner.stop()

if __name__ == "__main__":
    # –¢–µ—Å—Ç–æ–≤–∏–π –∑–∞–ø—É—Å–∫
    asyncio.run(start_scanner())
